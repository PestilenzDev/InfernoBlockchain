{"$message_type":"diagnostic","message":"unresolved imports `libp2p::gossipsub::Gossipsub`, `libp2p::gossipsub::GossipsubEvent`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_chaos.rs","byte_start":301,"byte_end":310,"line_start":7,"line_end":7,"column_start":25,"column_end":34,"is_primary":true,"text":[{"text":"use libp2p::gossipsub::{Gossipsub, GossipsubEvent, IdentTopic};","highlight_start":25,"highlight_end":34}],"label":"no `Gossipsub` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_chaos.rs","byte_start":312,"byte_end":326,"line_start":7,"line_end":7,"column_start":36,"column_end":50,"is_primary":true,"text":[{"text":"use libp2p::gossipsub::{Gossipsub, GossipsubEvent, IdentTopic};","highlight_start":36,"highlight_end":50}],"label":"no `GossipsubEvent` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `libp2p::gossipsub::Gossipsub`, `libp2p::gossipsub::GossipsubEvent`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_chaos.rs:7:25\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse libp2p::gossipsub::{Gossipsub, GossipsubEvent, IdentTopic};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `GossipsubEvent` in the root\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Gossipsub` in the root\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `libp2p::gossipsub::Gossipsub`, `libp2p::gossipsub::GossipsubEvent`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":456,"byte_end":465,"line_start":10,"line_end":10,"column_start":25,"column_end":34,"is_primary":true,"text":[{"text":"use libp2p::gossipsub::{Gossipsub, GossipsubEvent, IdentTopic};","highlight_start":25,"highlight_end":34}],"label":"no `Gossipsub` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":467,"byte_end":481,"line_start":10,"line_end":10,"column_start":36,"column_end":50,"is_primary":true,"text":[{"text":"use libp2p::gossipsub::{Gossipsub, GossipsubEvent, IdentTopic};","highlight_start":36,"highlight_end":50}],"label":"no `GossipsubEvent` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `libp2p::gossipsub::Gossipsub`, `libp2p::gossipsub::GossipsubEvent`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs:10:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse libp2p::gossipsub::{Gossipsub, GossipsubEvent, IdentTopic};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `GossipsubEvent` in the root\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Gossipsub` in the root\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `libp2p::gossipsub::Gossipsub`, `libp2p::gossipsub::GossipsubConfigBuilder`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":609,"byte_end":618,"line_start":12,"line_end":12,"column_start":25,"column_end":34,"is_primary":true,"text":[{"text":"use libp2p::gossipsub::{Gossipsub, GossipsubConfigBuilder};","highlight_start":25,"highlight_end":34}],"label":"no `Gossipsub` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":620,"byte_end":642,"line_start":12,"line_end":12,"column_start":36,"column_end":58,"is_primary":true,"text":[{"text":"use libp2p::gossipsub::{Gossipsub, GossipsubConfigBuilder};","highlight_start":36,"highlight_end":58}],"label":"no `GossipsubConfigBuilder` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `libp2p::gossipsub::Gossipsub`, `libp2p::gossipsub::GossipsubConfigBuilder`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs:12:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse libp2p::gossipsub::{Gossipsub, GossipsubConfigBuilder};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `GossipsubConfigBuilder` in the root\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Gossipsub` in the root\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `libp2p::gossipsub::Gossipsub`, `libp2p::gossipsub::GossipsubEvent`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs","byte_start":460,"byte_end":469,"line_start":11,"line_end":11,"column_start":25,"column_end":34,"is_primary":true,"text":[{"text":"use libp2p::gossipsub::{Gossipsub, GossipsubEvent, IdentTopic};","highlight_start":25,"highlight_end":34}],"label":"no `Gossipsub` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs","byte_start":471,"byte_end":485,"line_start":11,"line_end":11,"column_start":36,"column_end":50,"is_primary":true,"text":[{"text":"use libp2p::gossipsub::{Gossipsub, GossipsubEvent, IdentTopic};","highlight_start":36,"highlight_end":50}],"label":"no `GossipsubEvent` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `libp2p::gossipsub::Gossipsub`, `libp2p::gossipsub::GossipsubEvent`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs:11:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse libp2p::gossipsub::{Gossipsub, GossipsubEvent, IdentTopic};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `GossipsubEvent` in the root\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Gossipsub` in the root\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `infernal_neuroswarm_consensus_types::Flamecall`, `infernal_neuroswarm_consensus_types::Emberblock`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/mod.rs","byte_start":986,"byte_end":995,"line_start":20,"line_end":20,"column_start":75,"column_end":84,"is_primary":true,"text":[{"text":"pub use infernal_neuroswarm_consensus_types::{Shard, Neuron, SuperNeuron, Flamecall, Emberblock};","highlight_start":75,"highlight_end":84}],"label":"no `Flamecall` in `core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/mod.rs","byte_start":997,"byte_end":1007,"line_start":20,"line_end":20,"column_start":86,"column_end":96,"is_primary":true,"text":[{"text":"pub use infernal_neuroswarm_consensus_types::{Shard, Neuron, SuperNeuron, Flamecall, Emberblock};","highlight_start":86,"highlight_end":96}],"label":"no `Emberblock` in `core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this struct through its public re-export instead:\ncrate::core::Flamecall","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider importing this struct through its public re-export instead:\ncrate::core::Emberblock","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/mod.rs","byte_start":986,"byte_end":995,"line_start":20,"line_end":20,"column_start":75,"column_end":84,"is_primary":true,"text":[{"text":"pub use infernal_neuroswarm_consensus_types::{Shard, Neuron, SuperNeuron, Flamecall, Emberblock};","highlight_start":75,"highlight_end":84}],"label":null,"suggested_replacement":"Flamehash","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved imports `infernal_neuroswarm_consensus_types::Flamecall`, `infernal_neuroswarm_consensus_types::Emberblock`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/mod.rs:20:75\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use infernal_neuroswarm_consensus_types::{Shard, Neuron, SuperNeuron, Flamecall, Emberblock};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Emberblock` in `core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Flamecall` in `core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar name exists in the module: `Flamehash`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider importing this struct through its public re-export instead:\u001b[0m\n\u001b[0m           crate::core::Flamecall\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider importing this struct through its public re-export instead:\u001b[0m\n\u001b[0m           crate::core::Emberblock\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `Signature` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs","byte_start":2561,"byte_end":2570,"line_start":70,"line_end":70,"column_start":36,"column_end":45,"is_primary":true,"text":[{"text":"    pub zk_proof: Option<(Vec<u8>, Signature)>, // Vollwertig implementiert","highlight_start":36,"highlight_end":45}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs","byte_start":82,"byte_end":82,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use schnorrkel::Signature;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs","byte_start":82,"byte_end":82,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_core::crypto::Signature;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs","byte_start":82,"byte_end":82,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_core::ecdsa::Signature;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs","byte_start":82,"byte_end":82,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_core::ed25519::Signature;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs","byte_start":82,"byte_end":82,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_core::paired_crypto::Signature;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs","byte_start":82,"byte_end":82,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_core::sr25519::Signature;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs","byte_start":82,"byte_end":82,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_runtime::testing::sr25519::Signature;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs","byte_start":82,"byte_end":82,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use threshold_crypto::Signature;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `Signature` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs:70:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub zk_proof: Option<(Vec<u8>, Signature)>, // Vollwertig implementiert\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use schnorrkel::Signature;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use sp_core::crypto::Signature;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use sp_core::ecdsa::Signature;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use sp_core::ed25519::Signature;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     and 4 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `debug`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":172,"byte_end":177,"line_start":6,"line_end":6,"column_start":11,"column_end":16,"is_primary":true,"text":[{"text":"use log::{debug, info};","highlight_start":11,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":172,"byte_end":179,"line_start":6,"line_end":6,"column_start":11,"column_end":18,"is_primary":true,"text":[{"text":"use log::{debug, info};","highlight_start":11,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":171,"byte_end":172,"line_start":6,"line_end":6,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"use log::{debug, info};","highlight_start":10,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":183,"byte_end":184,"line_start":6,"line_end":6,"column_start":22,"column_end":23,"is_primary":true,"text":[{"text":"use log::{debug, info};","highlight_start":22,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `debug`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_types/infernal_types_flamecall.rs:6:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse log::{debug, info};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `debug`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_types/infernal_types_emberblock.rs","byte_start":342,"byte_end":347,"line_start":9,"line_end":9,"column_start":11,"column_end":16,"is_primary":true,"text":[{"text":"use log::{debug, info};","highlight_start":11,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_types/infernal_types_emberblock.rs","byte_start":342,"byte_end":349,"line_start":9,"line_end":9,"column_start":11,"column_end":18,"is_primary":true,"text":[{"text":"use log::{debug, info};","highlight_start":11,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/core/infernal_types/infernal_types_emberblock.rs","byte_start":341,"byte_end":342,"line_start":9,"line_end":9,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"use log::{debug, info};","highlight_start":10,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/core/infernal_types/infernal_types_emberblock.rs","byte_start":353,"byte_end":354,"line_start":9,"line_end":9,"column_start":22,"column_end":23,"is_primary":true,"text":[{"text":"use log::{debug, info};","highlight_start":22,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `debug`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_types/infernal_types_emberblock.rs:9:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse log::{debug, info};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Neuron` and `SuperNeuron`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":175,"byte_end":181,"line_start":3,"line_end":3,"column_start":94,"column_end":100,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::{Shard, Neuron, SuperNeuron, INSCFlamecall, INSCEmberblock};","highlight_start":94,"highlight_end":100}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":183,"byte_end":194,"line_start":3,"line_end":3,"column_start":102,"column_end":113,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::{Shard, Neuron, SuperNeuron, INSCFlamecall, INSCEmberblock};","highlight_start":102,"highlight_end":113}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":173,"byte_end":194,"line_start":3,"line_end":3,"column_start":92,"column_end":113,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::{Shard, Neuron, SuperNeuron, INSCFlamecall, INSCEmberblock};","highlight_start":92,"highlight_end":113}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Neuron` and `SuperNeuron`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs:3:94\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m_neuroswarm_consensus_types::{Shard, Neuron, SuperNeuron, INSCFlamecall, INSCEmberblock};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `warn`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":495,"byte_end":499,"line_start":8,"line_end":8,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"use log::{debug, info, warn};","highlight_start":24,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":493,"byte_end":499,"line_start":8,"line_end":8,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"use log::{debug, info, warn};","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `warn`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs:8:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse log::{debug, info, warn};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `tokio`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":578,"byte_end":583,"line_start":11,"line_end":11,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use tokio;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":574,"byte_end":585,"line_start":11,"line_end":12,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tokio;","highlight_start":1,"highlight_end":11},{"text":"use libp2p::gossipsub::{Gossipsub, GossipsubConfigBuilder};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `tokio`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `INSCFlamecall`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_storage.rs","byte_start":185,"byte_end":198,"line_start":3,"line_end":3,"column_start":102,"column_end":115,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::{Shard, Neuron, INSCFlamecall};","highlight_start":102,"highlight_end":115}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_storage.rs","byte_start":183,"byte_end":198,"line_start":3,"line_end":3,"column_start":100,"column_end":115,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::{Shard, Neuron, INSCFlamecall};","highlight_start":100,"highlight_end":115}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `INSCFlamecall`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_storage.rs:3:102\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0moswarm_consensus_types::{Shard, Neuron, INSCFlamecall};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Neuron`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_swarmforge.rs","byte_start":242,"byte_end":248,"line_start":4,"line_end":4,"column_start":94,"column_end":100,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::{Shard, Neuron, SuperNeuron, INSCFlamecall};","highlight_start":94,"highlight_end":100}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_swarmforge.rs","byte_start":240,"byte_end":248,"line_start":4,"line_end":4,"column_start":92,"column_end":100,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::{Shard, Neuron, SuperNeuron, INSCFlamecall};","highlight_start":92,"highlight_end":100}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Neuron`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_swarmforge.rs:4:94\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mfernal_neuroswarm_consensus_types::{Shard, Neuron, SuperNeuron, INSCFlamecall};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `PublicKey`, `Signature`, `VRFPreOut`, and `VRFProof`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":268,"byte_end":277,"line_start":6,"line_end":6,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"use schnorrkel::{Keypair, PublicKey, Signature, vrf::{VRFInOut, VRFProof, VRFPreOut}};","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":279,"byte_end":288,"line_start":6,"line_end":6,"column_start":38,"column_end":47,"is_primary":true,"text":[{"text":"use schnorrkel::{Keypair, PublicKey, Signature, vrf::{VRFInOut, VRFProof, VRFPreOut}};","highlight_start":38,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":306,"byte_end":314,"line_start":6,"line_end":6,"column_start":65,"column_end":73,"is_primary":true,"text":[{"text":"use schnorrkel::{Keypair, PublicKey, Signature, vrf::{VRFInOut, VRFProof, VRFPreOut}};","highlight_start":65,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":316,"byte_end":325,"line_start":6,"line_end":6,"column_start":75,"column_end":84,"is_primary":true,"text":[{"text":"use schnorrkel::{Keypair, PublicKey, Signature, vrf::{VRFInOut, VRFProof, VRFPreOut}};","highlight_start":75,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":266,"byte_end":288,"line_start":6,"line_end":6,"column_start":25,"column_end":47,"is_primary":true,"text":[{"text":"use schnorrkel::{Keypair, PublicKey, Signature, vrf::{VRFInOut, VRFProof, VRFPreOut}};","highlight_start":25,"highlight_end":47}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":304,"byte_end":325,"line_start":6,"line_end":6,"column_start":63,"column_end":84,"is_primary":true,"text":[{"text":"use schnorrkel::{Keypair, PublicKey, Signature, vrf::{VRFInOut, VRFProof, VRFPreOut}};","highlight_start":63,"highlight_end":84}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":295,"byte_end":296,"line_start":6,"line_end":6,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"use schnorrkel::{Keypair, PublicKey, Signature, vrf::{VRFInOut, VRFProof, VRFPreOut}};","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":325,"byte_end":326,"line_start":6,"line_end":6,"column_start":84,"column_end":85,"is_primary":true,"text":[{"text":"use schnorrkel::{Keypair, PublicKey, Signature, vrf::{VRFInOut, VRFProof, VRFPreOut}};","highlight_start":84,"highlight_end":85}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `PublicKey`, `Signature`, `VRFPreOut`, and `VRFProof`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs:6:27\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse schnorrkel::{Keypair, PublicKey, Signature, vrf::{VRFInOut, VRFProof, VRFPreOut}};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `rand::Rng`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":333,"byte_end":342,"line_start":7,"line_end":7,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use rand::Rng;","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":329,"byte_end":344,"line_start":7,"line_end":8,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use rand::Rng;","highlight_start":1,"highlight_end":15},{"text":"use tch::{nn, Tensor, Device, Kind};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rand::Rng`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rand::Rng;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `SystemTime` and `UNIX_EPOCH`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":397,"byte_end":407,"line_start":9,"line_end":9,"column_start":17,"column_end":27,"is_primary":true,"text":[{"text":"use std::time::{SystemTime, UNIX_EPOCH};","highlight_start":17,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":409,"byte_end":419,"line_start":9,"line_end":9,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"use std::time::{SystemTime, UNIX_EPOCH};","highlight_start":29,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":381,"byte_end":422,"line_start":9,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::time::{SystemTime, UNIX_EPOCH};","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `SystemTime` and `UNIX_EPOCH`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs:9:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::time::{SystemTime, UNIX_EPOCH};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `SystemTime` and `UNIX_EPOCH`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs","byte_start":130,"byte_end":140,"line_start":4,"line_end":4,"column_start":17,"column_end":27,"is_primary":true,"text":[{"text":"use std::time::{SystemTime, UNIX_EPOCH};","highlight_start":17,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs","byte_start":142,"byte_end":152,"line_start":4,"line_end":4,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"use std::time::{SystemTime, UNIX_EPOCH};","highlight_start":29,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs","byte_start":114,"byte_end":155,"line_start":4,"line_end":5,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::time::{SystemTime, UNIX_EPOCH};","highlight_start":1,"highlight_end":41},{"text":"use crate::core::error::InfernoError;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `SystemTime` and `UNIX_EPOCH`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs:4:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::time::{SystemTime, UNIX_EPOCH};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::core::infernal_types::infernal_keys::InfernalKeys`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs","byte_start":315,"byte_end":371,"line_start":7,"line_end":7,"column_start":5,"column_end":61,"is_primary":true,"text":[{"text":"use crate::core::infernal_types::infernal_keys::InfernalKeys;","highlight_start":5,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs","byte_start":311,"byte_end":373,"line_start":7,"line_end":8,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::core::infernal_types::infernal_keys::InfernalKeys;","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::core::infernal_types::infernal_keys::InfernalKeys`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::core::infernal_types::infernal_keys::InfernalKeys;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_chaos.rs","byte_start":2368,"byte_end":2386,"line_start":52,"line_end":52,"column_start":76,"column_end":94,"is_primary":true,"text":[{"text":"                neuron.flamekeeper.latency = (neuron.flamekeeper.latency + self.latency_spike).min(1000); // Begrenze auf 1s","highlight_start":76,"highlight_end":94}],"label":"expected `u64`, found `u32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_chaos.rs:52:76\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m.flamekeeper.latency + self.latency_spike).min(1000); // Begrenze auf 1s\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `u64`, found `u32`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot add `u32` to `u64`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_chaos.rs","byte_start":2366,"byte_end":2367,"line_start":52,"line_end":52,"column_start":74,"column_end":75,"is_primary":true,"text":[{"text":"                neuron.flamekeeper.latency = (neuron.flamekeeper.latency + self.latency_spike).min(1000); // Begrenze auf 1s","highlight_start":74,"highlight_end":75}],"label":"no implementation for `u64 + u32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Add<u32>` is not implemented for `u64`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `Add<Rhs>`:\n  `&u64` implements `Add<&num_complex::Complex<u64>>`\n  `&u64` implements `Add<num_complex::Complex<u64>>`\n  `&u64` implements `Add<u64>`\n  `&u64` implements `Add`\n  `u64` implements `Add<&ndarray::ArrayBase<S, D>>`\n  `u64` implements `Add<&num_complex::Complex<u64>>`\n  `u64` implements `Add<&u64>`\n  `u64` implements `Add<ndarray::ArrayBase<S, D>>`\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: cannot add `u32` to `u64`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_chaos.rs:52:74\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m(neuron.flamekeeper.latency + self.latency_spike).min(1000); // Begrenze auf 1s\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno implementation for `u64 + u32`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Add<u32>` is not implemented for `u64`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Add<Rhs>`:\u001b[0m\n\u001b[0m             `&u64` implements `Add<&num_complex::Complex<u64>>`\u001b[0m\n\u001b[0m             `&u64` implements `Add<num_complex::Complex<u64>>`\u001b[0m\n\u001b[0m             `&u64` implements `Add<u64>`\u001b[0m\n\u001b[0m             `&u64` implements `Add`\u001b[0m\n\u001b[0m             `u64` implements `Add<&ndarray::ArrayBase<S, D>>`\u001b[0m\n\u001b[0m             `u64` implements `Add<&num_complex::Complex<u64>>`\u001b[0m\n\u001b[0m             `u64` implements `Add<&u64>`\u001b[0m\n\u001b[0m             `u64` implements `Add<ndarray::ArrayBase<S, D>>`\u001b[0m\n\u001b[0m           and 3 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":3892,"byte_end":3893,"line_start":84,"line_end":84,"column_start":96,"column_end":97,"is_primary":true,"text":[{"text":"        let latency_spike = batch.iter().map(|tx| (SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs() as f32 - tx.core.timestamp as f32) * 1000.0).sum::<f32>() / batch.len() as f32;","highlight_start":96,"highlight_end":97}],"label":"cannot use the `?` operator in a closure that returns `f32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":3892,"byte_end":3893,"line_start":84,"line_end":84,"column_start":96,"column_end":97,"is_primary":false,"text":[{"text":"        let latency_spike = batch.iter().map(|tx| (SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs() as f32 - tx.core.timestamp as f32) * 1000.0).sum::<f32>() / batch.len() as f32;","highlight_start":96,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":3842,"byte_end":3846,"line_start":84,"line_end":84,"column_start":46,"column_end":50,"is_primary":false,"text":[{"text":"        let latency_spike = batch.iter().map(|tx| (SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs() as f32 - tx.core.timestamp as f32) * 1000.0).sum::<f32>() / batch.len() as f32;","highlight_start":46,"highlight_end":50}],"label":"this function should return `Result` or `Option` to accept `?`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs:84:96\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mbatch.iter().map(|tx| (SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs() as f32 - tx.c\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot use the `?` operator in a closure that returns `f32`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis function should return `Result` or `Option` to accept `?`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `data` on type `Flamecall`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":7318,"byte_end":7322,"line_start":152,"line_end":152,"column_start":18,"column_end":22,"is_primary":true,"text":[{"text":"            core.data = Some(hash.into_bytes());","highlight_start":18,"highlight_end":22}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"one of the expressions' fields has a field of the same name","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":7318,"byte_end":7318,"line_start":152,"line_end":152,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"            core.data = Some(hash.into_bytes());","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"core.","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `data` on type `Flamecall`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs:152:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            core.data = Some(hash.into_bytes());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: one of the expressions' fields has a field of the same name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            core.\u001b[0m\u001b[0m\u001b[38;5;10mcore.\u001b[0m\u001b[0mdata = Some(hash.into_bytes());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[38;5;10m+++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `INSCEmberblock: From<&&Shard>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":7731,"byte_end":7745,"line_start":160,"line_end":160,"column_start":40,"column_end":54,"is_primary":true,"text":[{"text":"            self.flamehash.hash_block(&INSCEmberblock::from(&shard))?","highlight_start":40,"highlight_end":54}],"label":"the trait `From<&&Shard>` is not implemented for `INSCEmberblock`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `From<&&Shard>` is not implemented for `INSCEmberblock`\nbut trait `From<&Shard>` is implemented for it","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for that trait implementation, expected `Shard`, found `&Shard`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `INSCEmberblock: From<&&Shard>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs:160:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.flamehash.hash_block(&INSCEmberblock::from(&shard))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&&Shard>` is not implemented for `INSCEmberblock`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `From<&\u001b[0m\u001b[0m\u001b[1m\u001b[35m&\u001b[0m\u001b[0mShard>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis not\u001b[0m\u001b[0m implemented for `INSCEmberblock`\u001b[0m\n\u001b[0m            but trait `From<&Shard>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for it\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for that trait implementation, expected `\u001b[0m\u001b[0m\u001b[1m\u001b[35mShard\u001b[0m\u001b[0m`, found `\u001b[0m\u001b[0m\u001b[1m\u001b[35m&Shard\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs","byte_start":2707,"byte_end":2719,"line_start":68,"line_end":68,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"            cluster.push(node.clone());","highlight_start":26,"highlight_end":38}],"label":"expected `Neuron`, found `&Neuron`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs","byte_start":2702,"byte_end":2706,"line_start":68,"line_end":68,"column_start":21,"column_end":25,"is_primary":false,"text":[{"text":"            cluster.push(node.clone());","highlight_start":21,"highlight_end":25}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs","byte_start":92891,"byte_end":92895,"line_start":2442,"line_end":2442,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    pub fn push(&mut self, value: T) {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using clone here","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs","byte_start":2719,"byte_end":2719,"line_start":68,"line_end":68,"column_start":38,"column_end":38,"is_primary":true,"text":[{"text":"            cluster.push(node.clone());","highlight_start":38,"highlight_end":38}],"label":null,"suggested_replacement":".clone()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs:68:26\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            cluster.push(node.clone());\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Neuron`, found `&Neuron`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:2442:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2442\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn push(&mut self, value: T) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using clone here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            cluster.push(node.clone()\u001b[0m\u001b[0m\u001b[38;5;10m.clone()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `timeout` found for opaque type `impl futures::Future<Output = std::option::Option<(u64, f32, f32)>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs","byte_start":3766,"byte_end":3773,"line_start":90,"line_end":90,"column_start":68,"column_end":75,"is_primary":true,"text":[{"text":"        while let Some((_, workload, _)) = self.feedback_rx.recv().timeout(Duration::from_millis(10)).await? {","highlight_start":68,"highlight_end":75}],"label":"method not found in `impl Future<Output = Option<(u64, f32, f32)>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `timeout` found for opaque type `impl futures::Future<Output = std::option::Option<(u64, f32, f32)>>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs:90:68\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m.recv().timeout(Duration::from_millis(10)).await? {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `impl Future<Output = Option<(u64, f32, f32)>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `of_slice` found for struct `tch::Tensor` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs","byte_start":4252,"byte_end":4260,"line_start":98,"line_end":98,"column_start":37,"column_end":45,"is_primary":true,"text":[{"text":"        let latency_input = Tensor::of_slice(&[latency_clusters.iter().sum::<f32>() / latency_clusters.len() as f32])","highlight_start":37,"highlight_end":45}],"label":"function or associated item not found in `Tensor`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `tch::Tensor` consider using one of the following associated functions:\ntch::Tensor::new\ntch::Tensor::from_ptr\ntch::Tensor::clone_from_ptr\ntch::Tensor::f_from_slice\nand 909 others","code":null,"level":"note","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":871,"byte_end":893,"line_start":33,"line_end":33,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    pub fn new() -> Tensor {","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":1179,"byte_end":1234,"line_start":44,"line_end":44,"column_start":5,"column_end":60,"is_primary":true,"text":[{"text":"    pub unsafe fn from_ptr(c_tensor: *mut C_tensor) -> Self {","highlight_start":5,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":1538,"byte_end":1599,"line_start":55,"line_end":55,"column_start":5,"column_end":66,"is_primary":true,"text":[{"text":"    pub unsafe fn clone_from_ptr(c_tensor: *mut C_tensor) -> Self {","highlight_start":5,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":14802,"byte_end":14879,"line_start":432,"line_end":432,"column_start":5,"column_end":82,"is_primary":true,"text":[{"text":"    pub fn f_from_slice<T: kind::Element>(data: &[T]) -> Result<Tensor, TchError> {","highlight_start":5,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"there is a method `f_slice` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor_fallible_generated.rs","byte_start":1030485,"byte_end":1030662,"line_start":31575,"line_end":31581,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"    pub fn f_slice(","highlight_start":5,"highlight_end":1},{"text":"        &self,","highlight_start":1,"highlight_end":1},{"text":"        dim: i64,","highlight_start":1,"highlight_end":1},{"text":"        start: impl Into<Option<i64>>,","highlight_start":1,"highlight_end":1},{"text":"        end: impl Into<Option<i64>>,","highlight_start":1,"highlight_end":1},{"text":"        step: i64,","highlight_start":1,"highlight_end":1},{"text":"    ) -> Result<Tensor, TchError> {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `of_slice` found for struct `tch::Tensor` in the current scope\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs:98:37\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mnput = Tensor::of_slice(&[latency_clusters.iter().sum::<f32>() / latency_clusters.len() a\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `Tensor`\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `tch::Tensor` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      tch::Tensor::new\u001b[0m\n\u001b[0m      tch::Tensor::from_ptr\u001b[0m\n\u001b[0m      tch::Tensor::clone_from_ptr\u001b[0m\n\u001b[0m      tch::Tensor::f_from_slice\u001b[0m\n\u001b[0m      and 909 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs:33:5\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Tensor {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn from_ptr(c_tensor: *mut C_tensor) -> Self {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn clone_from_ptr(c_tensor: *mut C_tensor) -> Self {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn f_from_slice<T: kind::Element>(data: &[T]) -> Result<Tensor, TchError> {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `f_slice` with a similar name, but with different arguments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor_fallible_generated.rs:31575:5\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn f_slice(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        dim: i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31578\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        start: impl Into<Option<i64>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31579\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        end: impl Into<Option<i64>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        step: i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<Tensor, TchError> {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `forward` exists for struct `Sequential`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/sequential.rs","byte_start":190,"byte_end":211,"line_start":7,"line_end":7,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"pub struct Sequential {","highlight_start":1,"highlight_end":22}],"label":"doesn't satisfy `Sequential: StreamExt` or `Sequential: futures::Stream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs","byte_start":4436,"byte_end":4443,"line_start":101,"line_end":101,"column_start":42,"column_end":49,"is_primary":true,"text":[{"text":"        let latency_weight = self.geo_nn.forward(&latency_input).double_value(&[0]) as f32;","highlight_start":42,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`Sequential: futures::Stream`\nwhich is required by `Sequential: StreamExt`\n`&Sequential: futures::Stream`\nwhich is required by `&Sequential: StreamExt`\n`&mut Sequential: futures::Stream`\nwhich is required by `&mut Sequential: StreamExt`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait `Module` which provides `forward` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs","byte_start":87,"byte_end":87,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::{Shard, Neuron, INSCFlamecall};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use tch::nn::Module;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `forward` exists for struct `Sequential`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_microflame.rs:101:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let latency_weight = self.geo_nn.forward(&latency_input).double_value(&[0]) as f32;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/sequential.rs:7:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Sequential {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `Sequential: StreamExt` or `Sequential: futures::Stream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `Sequential: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `Sequential: StreamExt`\u001b[0m\n\u001b[0m            `&Sequential: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `&Sequential: StreamExt`\u001b[0m\n\u001b[0m            `&mut Sequential: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `&mut Sequential: StreamExt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `Module` which provides `forward` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use tch::nn::Module;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `location` on type `Flamekeeper`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_mev_flames/infernal_mev_flames_logic.rs","byte_start":1446,"byte_end":1454,"line_start":32,"line_end":32,"column_start":60,"column_end":68,"is_primary":true,"text":[{"text":"            let heat = nexus.heat_index.get(&validators[0].location.0.to_string()).unwrap_or(&50.0);","highlight_start":60,"highlight_end":68}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `id`, `stake`, `latitude`, `longitude`, `cpu_units` ... and 7 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `location` on type `Flamekeeper`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_mev_flames/infernal_mev_flames_logic.rs:32:60\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let heat = nexus.heat_index.get(&validators[0].location.0.to_string()).unwrap_or(&50.0);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `id`, `stake`, `latitude`, `longitude`, `cpu_units` ... and 7 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `location` on type `&Flamekeeper`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_mev_flames/infernal_mev_flames_nexus.rs","byte_start":1135,"byte_end":1143,"line_start":22,"line_end":22,"column_start":32,"column_end":40,"is_primary":true,"text":[{"text":"                let region = v.location.0.to_string();","highlight_start":32,"highlight_end":40}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `id`, `stake`, `latitude`, `longitude`, `cpu_units` ... and 7 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `location` on type `&Flamekeeper`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_mev_flames/infernal_mev_flames_nexus.rs:22:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let region = v.location.0.to_string();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `id`, `stake`, `latitude`, `longitude`, `cpu_units` ... and 7 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no variant or associated item named `LatencyTooHigh` found for enum `InfernoError` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_types/infernal_types_flamekeeper.rs","byte_start":2629,"byte_end":2643,"line_start":79,"line_end":79,"column_start":38,"column_end":52,"is_primary":true,"text":[{"text":"            return Err(InfernoError::LatencyTooHigh(latency));","highlight_start":38,"highlight_end":52}],"label":"variant or associated item not found in `InfernoError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/error.rs","byte_start":113,"byte_end":134,"line_start":7,"line_end":7,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"pub enum InfernoError {","highlight_start":1,"highlight_end":22}],"label":"variant or associated item `LatencyTooHigh` not found for this enum","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no variant or associated item named `LatencyTooHigh` found for enum `InfernoError` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_types/infernal_types_flamekeeper.rs:79:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return Err(InfernoError::LatencyTooHigh(latency));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant or associated item not found in `InfernoError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/core/error.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum InfernoError {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvariant or associated item `LatencyTooHigh` not found for this enum\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `gas` on type `&Flamecall`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_runtime/infernal_runtime_execution.rs","byte_start":262,"byte_end":265,"line_start":7,"line_end":7,"column_start":11,"column_end":14,"is_primary":true,"text":[{"text":"    if tx.gas < (config.gas_base_fee * 1_000_000.0) as u64 {","highlight_start":11,"highlight_end":14}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `id`, `sender`, `recipient`, `amount`, `gas_limit` ... and 6 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `gas` on type `&Flamecall`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_runtime/infernal_runtime_execution.rs:7:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if tx.gas < (config.gas_base_fee * 1_000_000.0) as u64 {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `id`, `sender`, `recipient`, `amount`, `gas_limit` ... and 6 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `receiver` on type `&Flamecall`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_runtime/infernal_runtime_execution.rs","byte_start":633,"byte_end":641,"line_start":16,"line_end":16,"column_start":32,"column_end":40,"is_primary":true,"text":[{"text":"    *runtime.balances.entry(tx.receiver.clone()).or_insert(0) += tx.amount;","highlight_start":32,"highlight_end":40}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `id`, `sender`, `recipient`, `amount`, `gas_limit` ... and 6 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `receiver` on type `&Flamecall`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_runtime/infernal_runtime_execution.rs:16:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    *runtime.balances.entry(tx.receiver.clone()).or_insert(0) += tx.amount;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `id`, `sender`, `recipient`, `amount`, `gas_limit` ... and 6 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `receiver` on type `&Flamecall`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_runtime/infernal_runtime_execution.rs","byte_start":833,"byte_end":841,"line_start":22,"line_end":22,"column_start":30,"column_end":38,"is_primary":true,"text":[{"text":"        tx.id, tx.sender, tx.receiver, tx.amount, runtime.current_block_height","highlight_start":30,"highlight_end":38}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `id`, `sender`, `recipient`, `amount`, `gas_limit` ... and 6 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `receiver` on type `&Flamecall`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_runtime/infernal_runtime_execution.rs:22:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tx.id, tx.sender, tx.receiver, tx.amount, runtime.current_block_height\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `id`, `sender`, `recipient`, `amount`, `gas_limit` ... and 6 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `of_slice` found for struct `tch::Tensor` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_finalflame.rs","byte_start":3759,"byte_end":3767,"line_start":83,"line_end":83,"column_start":30,"column_end":38,"is_primary":true,"text":[{"text":"        let inputs = Tensor::of_slice(load_metrics)","highlight_start":30,"highlight_end":38}],"label":"function or associated item not found in `Tensor`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `tch::Tensor` consider using one of the following associated functions:\ntch::Tensor::new\ntch::Tensor::from_ptr\ntch::Tensor::clone_from_ptr\ntch::Tensor::f_from_slice\nand 909 others","code":null,"level":"note","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":871,"byte_end":893,"line_start":33,"line_end":33,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    pub fn new() -> Tensor {","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":1179,"byte_end":1234,"line_start":44,"line_end":44,"column_start":5,"column_end":60,"is_primary":true,"text":[{"text":"    pub unsafe fn from_ptr(c_tensor: *mut C_tensor) -> Self {","highlight_start":5,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":1538,"byte_end":1599,"line_start":55,"line_end":55,"column_start":5,"column_end":66,"is_primary":true,"text":[{"text":"    pub unsafe fn clone_from_ptr(c_tensor: *mut C_tensor) -> Self {","highlight_start":5,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":14802,"byte_end":14879,"line_start":432,"line_end":432,"column_start":5,"column_end":82,"is_primary":true,"text":[{"text":"    pub fn f_from_slice<T: kind::Element>(data: &[T]) -> Result<Tensor, TchError> {","highlight_start":5,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"there is a method `f_slice` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor_fallible_generated.rs","byte_start":1030485,"byte_end":1030662,"line_start":31575,"line_end":31581,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"    pub fn f_slice(","highlight_start":5,"highlight_end":20},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        dim: i64,","highlight_start":1,"highlight_end":18},{"text":"        start: impl Into<Option<i64>>,","highlight_start":1,"highlight_end":39},{"text":"        end: impl Into<Option<i64>>,","highlight_start":1,"highlight_end":37},{"text":"        step: i64,","highlight_start":1,"highlight_end":19},{"text":"    ) -> Result<Tensor, TchError> {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `of_slice` found for struct `tch::Tensor` in the current scope\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_finalflame.rs:83:30\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let inputs = Tensor::of_slice(load_metrics)\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `Tensor`\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `tch::Tensor` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      tch::Tensor::new\u001b[0m\n\u001b[0m      tch::Tensor::from_ptr\u001b[0m\n\u001b[0m      tch::Tensor::clone_from_ptr\u001b[0m\n\u001b[0m      tch::Tensor::f_from_slice\u001b[0m\n\u001b[0m      and 909 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs:33:5\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Tensor {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn from_ptr(c_tensor: *mut C_tensor) -> Self {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn clone_from_ptr(c_tensor: *mut C_tensor) -> Self {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn f_from_slice<T: kind::Element>(data: &[T]) -> Result<Tensor, TchError> {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `f_slice` with a similar name, but with different arguments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor_fallible_generated.rs:31575:5\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn f_slice(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        dim: i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31578\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        start: impl Into<Option<i64>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31579\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        end: impl Into<Option<i64>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        step: i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<Tensor, TchError> {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `forward` found for struct `Sequential` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs","byte_start":204,"byte_end":211,"line_start":6,"line_end":6,"column_start":8,"column_end":15,"is_primary":false,"text":[{"text":"    fn forward(&self, xs: &Tensor) -> Tensor;","highlight_start":8,"highlight_end":15}],"label":"the method is available for `Sequential` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_finalflame.rs","byte_start":3874,"byte_end":3881,"line_start":86,"line_end":86,"column_start":32,"column_end":39,"is_primary":true,"text":[{"text":"        let interval = self.nn.forward(&inputs).double_value(&[0]) as f32;","highlight_start":32,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there is a method `forward_t` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs","byte_start":504,"byte_end":560,"line_start":14,"line_end":14,"column_start":5,"column_end":61,"is_primary":true,"text":[{"text":"    fn forward_t(&self, xs: &Tensor, train: bool) -> Tensor;","highlight_start":5,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"trait `Module` which provides `forward` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_finalflame.rs","byte_start":87,"byte_end":87,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::core::infernal_types::infernal_keys::InfernalKeys;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use tch::nn::Module;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `forward` found for struct `Sequential` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_finalflame.rs:86:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let interval = self.nn.forward(&inputs).double_value(&[0]) as f32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs:6:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn forward(&self, xs: &Tensor) -> Tensor;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `Sequential` here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `forward_t` with a similar name, but with different arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn forward_t(&self, xs: &Tensor, train: bool) -> Tensor;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `Module` which provides `forward` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use tch::nn::Module;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `build` found for struct `Adam` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/optimizer.rs","byte_start":703,"byte_end":708,"line_start":23,"line_end":23,"column_start":8,"column_end":13,"is_primary":false,"text":[{"text":"    fn build(self, vs: &VarStore, lr: f64) -> Result<Optimizer, TchError> {","highlight_start":8,"highlight_end":13}],"label":"the method is available for `Adam` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":1421,"byte_end":1426,"line_start":37,"line_end":37,"column_start":45,"column_end":50,"is_primary":true,"text":[{"text":"        let optimizer = nn::Adam::default().build(&vs, 0.01)?;","highlight_start":45,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there is a method `build_copt` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/optimizer.rs","byte_start":536,"byte_end":598,"line_start":20,"line_end":20,"column_start":5,"column_end":67,"is_primary":true,"text":[{"text":"    fn build_copt(&self, lr: f64) -> Result<COptimizer, TchError>;","highlight_start":5,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"trait `OptimizerConfig` which provides `build` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":83,"byte_end":83,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::{INSCFlamecall, Shard};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use tch::nn::OptimizerConfig;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `build` found for struct `Adam` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs:37:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let optimizer = nn::Adam::default().build(&vs, 0.01)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/optimizer.rs:23:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn build(self, vs: &VarStore, lr: f64) -> Result<Optimizer, TchError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `Adam` here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `build_copt` with a similar name, but with different arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/optimizer.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn build_copt(&self, lr: f64) -> Result<COptimizer, TchError>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `OptimizerConfig` which provides `build` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use tch::nn::OptimizerConfig;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `of_slice` found for struct `tch::Tensor` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":2559,"byte_end":2567,"line_start":65,"line_end":65,"column_start":30,"column_end":38,"is_primary":true,"text":[{"text":"        let inputs = Tensor::of_slice(&[latency, stake, tps, mev, success_rate, num_regions])","highlight_start":30,"highlight_end":38}],"label":"function or associated item not found in `Tensor`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `tch::Tensor` consider using one of the following associated functions:\ntch::Tensor::new\ntch::Tensor::from_ptr\ntch::Tensor::clone_from_ptr\ntch::Tensor::f_from_slice\nand 909 others","code":null,"level":"note","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":871,"byte_end":893,"line_start":33,"line_end":33,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    pub fn new() -> Tensor {","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":1179,"byte_end":1234,"line_start":44,"line_end":44,"column_start":5,"column_end":60,"is_primary":true,"text":[{"text":"    pub unsafe fn from_ptr(c_tensor: *mut C_tensor) -> Self {","highlight_start":5,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":1538,"byte_end":1599,"line_start":55,"line_end":55,"column_start":5,"column_end":66,"is_primary":true,"text":[{"text":"    pub unsafe fn clone_from_ptr(c_tensor: *mut C_tensor) -> Self {","highlight_start":5,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":14802,"byte_end":14879,"line_start":432,"line_end":432,"column_start":5,"column_end":82,"is_primary":true,"text":[{"text":"    pub fn f_from_slice<T: kind::Element>(data: &[T]) -> Result<Tensor, TchError> {","highlight_start":5,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"there is a method `f_slice` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor_fallible_generated.rs","byte_start":1030485,"byte_end":1030662,"line_start":31575,"line_end":31581,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"    pub fn f_slice(","highlight_start":5,"highlight_end":20},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        dim: i64,","highlight_start":1,"highlight_end":18},{"text":"        start: impl Into<Option<i64>>,","highlight_start":1,"highlight_end":39},{"text":"        end: impl Into<Option<i64>>,","highlight_start":1,"highlight_end":37},{"text":"        step: i64,","highlight_start":1,"highlight_end":19},{"text":"    ) -> Result<Tensor, TchError> {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `of_slice` found for struct `tch::Tensor` in the current scope\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs:65:30\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let inputs = Tensor::of_slice(&[latency, stake, tps, mev, success_rate, num_regions])\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `Tensor`\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `tch::Tensor` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      tch::Tensor::new\u001b[0m\n\u001b[0m      tch::Tensor::from_ptr\u001b[0m\n\u001b[0m      tch::Tensor::clone_from_ptr\u001b[0m\n\u001b[0m      tch::Tensor::f_from_slice\u001b[0m\n\u001b[0m      and 909 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs:33:5\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Tensor {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn from_ptr(c_tensor: *mut C_tensor) -> Self {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn clone_from_ptr(c_tensor: *mut C_tensor) -> Self {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn f_from_slice<T: kind::Element>(data: &[T]) -> Result<Tensor, TchError> {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `f_slice` with a similar name, but with different arguments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor_fallible_generated.rs:31575:5\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn f_slice(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        dim: i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31578\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        start: impl Into<Option<i64>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31579\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        end: impl Into<Option<i64>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        step: i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<Tensor, TchError> {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `forward` found for struct `Sequential` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs","byte_start":204,"byte_end":211,"line_start":6,"line_end":6,"column_start":8,"column_end":15,"is_primary":false,"text":[{"text":"    fn forward(&self, xs: &Tensor) -> Tensor;","highlight_start":8,"highlight_end":15}],"label":"the method is available for `Sequential` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":2796,"byte_end":2803,"line_start":69,"line_end":69,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"        let outputs = self.nn.forward(&inputs).squeeze();","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there is a method `forward_t` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs","byte_start":504,"byte_end":560,"line_start":14,"line_end":14,"column_start":5,"column_end":61,"is_primary":true,"text":[{"text":"    fn forward_t(&self, xs: &Tensor, train: bool) -> Tensor;","highlight_start":5,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"trait `Module` which provides `forward` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":83,"byte_end":83,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::{INSCFlamecall, Shard};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use tch::nn::Module;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `forward` found for struct `Sequential` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs:69:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let outputs = self.nn.forward(&inputs).squeeze();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs:6:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn forward(&self, xs: &Tensor) -> Tensor;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `Sequential` here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `forward_t` with a similar name, but with different arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn forward_t(&self, xs: &Tensor, train: bool) -> Tensor;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `Module` which provides `forward` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use tch::nn::Module;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `forward` found for struct `Sequential` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs","byte_start":204,"byte_end":211,"line_start":6,"line_end":6,"column_start":8,"column_end":15,"is_primary":false,"text":[{"text":"    fn forward(&self, xs: &Tensor) -> Tensor;","highlight_start":8,"highlight_end":15}],"label":"the method is available for `Sequential` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":7258,"byte_end":7265,"line_start":150,"line_end":150,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"        let outputs = self.nn.forward(&inputs);","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there is a method `forward_t` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs","byte_start":504,"byte_end":560,"line_start":14,"line_end":14,"column_start":5,"column_end":61,"is_primary":true,"text":[{"text":"    fn forward_t(&self, xs: &Tensor, train: bool) -> Tensor;","highlight_start":5,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"trait `Module` which provides `forward` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":83,"byte_end":83,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::{INSCFlamecall, Shard};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use tch::nn::Module;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `forward` found for struct `Sequential` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs:150:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let outputs = self.nn.forward(&inputs);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs:6:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn forward(&self, xs: &Tensor) -> Tensor;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `Sequential` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `forward_t` with a similar name, but with different arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs:14:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn forward_t(&self, xs: &Tensor, train: bool) -> Tensor;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `Module` which provides `forward` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use tch::nn::Module;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `of_slice` found for struct `tch::Tensor` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":7445,"byte_end":7453,"line_start":155,"line_end":155,"column_start":29,"column_end":37,"is_primary":true,"text":[{"text":"        let decay = Tensor::of_slice(&[self.decay_factor]).to_device(if self.use_gpu { Device::Cuda(0) } else { Device::Cpu });","highlight_start":29,"highlight_end":37}],"label":"function or associated item not found in `Tensor`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `tch::Tensor` consider using one of the following associated functions:\ntch::Tensor::new\ntch::Tensor::from_ptr\ntch::Tensor::clone_from_ptr\ntch::Tensor::f_from_slice\nand 909 others","code":null,"level":"note","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":871,"byte_end":893,"line_start":33,"line_end":33,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    pub fn new() -> Tensor {","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":1179,"byte_end":1234,"line_start":44,"line_end":44,"column_start":5,"column_end":60,"is_primary":true,"text":[{"text":"    pub unsafe fn from_ptr(c_tensor: *mut C_tensor) -> Self {","highlight_start":5,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":1538,"byte_end":1599,"line_start":55,"line_end":55,"column_start":5,"column_end":66,"is_primary":true,"text":[{"text":"    pub unsafe fn clone_from_ptr(c_tensor: *mut C_tensor) -> Self {","highlight_start":5,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":14802,"byte_end":14879,"line_start":432,"line_end":432,"column_start":5,"column_end":82,"is_primary":true,"text":[{"text":"    pub fn f_from_slice<T: kind::Element>(data: &[T]) -> Result<Tensor, TchError> {","highlight_start":5,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"there is a method `f_slice` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor_fallible_generated.rs","byte_start":1030485,"byte_end":1030662,"line_start":31575,"line_end":31581,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"    pub fn f_slice(","highlight_start":5,"highlight_end":20},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        dim: i64,","highlight_start":1,"highlight_end":18},{"text":"        start: impl Into<Option<i64>>,","highlight_start":1,"highlight_end":39},{"text":"        end: impl Into<Option<i64>>,","highlight_start":1,"highlight_end":37},{"text":"        step: i64,","highlight_start":1,"highlight_end":19},{"text":"    ) -> Result<Tensor, TchError> {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `of_slice` found for struct `tch::Tensor` in the current scope\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs:155:29\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let decay = Tensor::of_slice(&[self.decay_factor]).to_device(if self.use_gpu { Device:\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `Tensor`\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `tch::Tensor` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      tch::Tensor::new\u001b[0m\n\u001b[0m      tch::Tensor::from_ptr\u001b[0m\n\u001b[0m      tch::Tensor::clone_from_ptr\u001b[0m\n\u001b[0m      tch::Tensor::f_from_slice\u001b[0m\n\u001b[0m      and 909 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs:33:5\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Tensor {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn from_ptr(c_tensor: *mut C_tensor) -> Self {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn clone_from_ptr(c_tensor: *mut C_tensor) -> Self {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn f_from_slice<T: kind::Element>(data: &[T]) -> Result<Tensor, TchError> {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `f_slice` with a similar name, but with different arguments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor_fallible_generated.rs:31575:5\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn f_slice(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        dim: i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31578\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        start: impl Into<Option<i64>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31579\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        end: impl Into<Option<i64>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        step: i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<Tensor, TchError> {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `iter_mut` found for struct `Sequential` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs","byte_start":7561,"byte_end":7569,"line_start":156,"line_end":156,"column_start":17,"column_end":25,"is_primary":true,"text":[{"text":"        self.nn.iter_mut().for_each(|param| {","highlight_start":17,"highlight_end":25}],"label":"method not found in `Sequential`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `iter_mut` found for struct `Sequential` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_lilith.rs:156:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.nn.iter_mut().for_each(|param| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Sequential`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`Flamehash` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":1440,"byte_end":1508,"line_start":27,"line_end":27,"column_start":5,"column_end":73,"is_primary":true,"text":[{"text":"    flamehash: super::infernal_neuroswarm_consensus_flamehash::Flamehash,","highlight_start":5,"highlight_end":73}],"label":"`Flamehash` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":686,"byte_end":691,"line_start":15,"line_end":15,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/fmt/mod.rs","byte_start":35443,"byte_end":35458,"line_start":941,"line_end":941,"column_start":5,"column_end":20,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `Flamehash`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` to `Flamehash` or manually `impl std::fmt::Debug for Flamehash`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider annotating `Flamehash` with `#[derive(Debug)]`","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs","byte_start":391,"byte_end":391,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct Flamehash {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Debug)]\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `Flamehash` doesn't implement `std::fmt::Debug`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs:27:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this derive macro expansion\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    flamehash: super::infernal_neuroswarm_consensus_flamehash::Flamehash,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Flamehash` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` is not implemented for `Flamehash`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` to `Flamehash` or manually `impl std::fmt::Debug for Flamehash`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `Flamehash` with `#[derive(Debug)]`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ #[derive(Debug)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Flamehash {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `reward` on type `&mut Flamekeeper`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs","byte_start":9735,"byte_end":9741,"line_start":205,"line_end":205,"column_start":23,"column_end":29,"is_primary":true,"text":[{"text":"            validator.reward += reward;","highlight_start":23,"highlight_end":29}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `id`, `stake`, `latitude`, `longitude`, `cpu_units` ... and 7 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `reward` on type `&mut Flamekeeper`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_logic.rs:205:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            validator.reward += reward;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `id`, `stake`, `latitude`, `longitude`, `cpu_units` ... and 7 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `&[Neuron]: std::io::Read` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_storage.rs","byte_start":927,"byte_end":945,"line_start":30,"line_end":30,"column_start":37,"column_end":55,"is_primary":true,"text":[{"text":"        let compressed = encode_all(&shard.neurons[..], 3)?;","highlight_start":37,"highlight_end":55}],"label":"the trait `std::io::Read` is not implemented for `&[Neuron]`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_storage.rs","byte_start":916,"byte_end":926,"line_start":30,"line_end":30,"column_start":26,"column_end":36,"is_primary":false,"text":[{"text":"        let compressed = encode_all(&shard.neurons[..], 3)?;","highlight_start":26,"highlight_end":36}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::io::Read` is implemented for `&[u8]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `encode_all`","code":null,"level":"note","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-0.13.3/src/stream/functions.rs","byte_start":868,"byte_end":876,"line_start":32,"line_end":32,"column_start":22,"column_end":30,"is_primary":true,"text":[{"text":"pub fn encode_all<R: io::Read>(source: R, level: i32) -> io::Result<Vec<u8>> {","highlight_start":22,"highlight_end":30}],"label":"required by this bound in `encode_all`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `&[Neuron]: std::io::Read` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_storage.rs:30:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let compressed = encode_all(&shard.neurons[..], 3)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `std::io::Read` is not implemented for `&[Neuron]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::io::Read` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35m&[u8]\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `encode_all`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zstd-0.13.3/src/stream/functions.rs:32:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn encode_all<R: io::Read>(source: R, level: i32) -> io::Result<Vec<u8>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `encode_all`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `InfernoError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_storage.rs","byte_start":916,"byte_end":949,"line_start":30,"line_end":30,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"        let compressed = encode_all(&shard.neurons[..], 3)?;","highlight_start":26,"highlight_end":59}],"label":"this can't be annotated with `?` because it has type `Result<_, std::io::Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_storage.rs","byte_start":949,"byte_end":950,"line_start":30,"line_end":30,"column_start":59,"column_end":60,"is_primary":true,"text":[{"text":"        let compressed = encode_all(&shard.neurons[..], 3)?;","highlight_start":59,"highlight_end":60}],"label":"the trait `From<std::io::Error>` is not implemented for `InfernoError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_storage.rs","byte_start":949,"byte_end":950,"line_start":30,"line_end":30,"column_start":59,"column_end":60,"is_primary":false,"text":[{"text":"        let compressed = encode_all(&shard.neurons[..], 3)?;","highlight_start":59,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`InfernoError` needs to implement `From<std::io::Error>`","code":null,"level":"note","spans":[{"file_name":"src/core/error.rs","byte_start":113,"byte_end":134,"line_start":7,"line_end":7,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"pub enum InfernoError {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `InfernoError` implements `From<DialError>`\n  `InfernoError` implements `From<Infallible>`\n  `InfernoError` implements `From<SystemTimeError>`\n  `InfernoError` implements `From<TransportError<std::io::Error>>`\n  `InfernoError` implements `From<libp2p::libp2p_noise::Error>`\n  `InfernoError` implements `From<libp2p::multiaddr::Error>`\n  `InfernoError` implements `From<std::string::String>`\n  `InfernoError` implements `From<tokio::sync::mpsc::error::SendError<T>>`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `InfernoError`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_storage.rs:30:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let compressed = encode_all(&shard.neurons[..], 3)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<std::io::Error>` is not implemented for `InfernoError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, std::io::Error>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `InfernoError` needs to implement `From<std::io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/error.rs:7:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum InfernoError {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             `InfernoError` implements `From<DialError>`\u001b[0m\n\u001b[0m             `InfernoError` implements `From<Infallible>`\u001b[0m\n\u001b[0m             `InfernoError` implements `From<SystemTimeError>`\u001b[0m\n\u001b[0m             `InfernoError` implements `From<TransportError<std::io::Error>>`\u001b[0m\n\u001b[0m             `InfernoError` implements `From<libp2p::libp2p_noise::Error>`\u001b[0m\n\u001b[0m             `InfernoError` implements `From<libp2p::multiaddr::Error>`\u001b[0m\n\u001b[0m             `InfernoError` implements `From<std::string::String>`\u001b[0m\n\u001b[0m             `InfernoError` implements `From<tokio::sync::mpsc::error::SendError<T>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `of_slice` found for struct `tch::Tensor` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":1247,"byte_end":1255,"line_start":34,"line_end":34,"column_start":30,"column_end":38,"is_primary":true,"text":[{"text":"        let inputs = Tensor::of_slice(&[mev_potential, stake_volatility, latency_forecast])","highlight_start":30,"highlight_end":38}],"label":"function or associated item not found in `Tensor`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `tch::Tensor` consider using one of the following associated functions:\ntch::Tensor::new\ntch::Tensor::from_ptr\ntch::Tensor::clone_from_ptr\ntch::Tensor::f_from_slice\nand 909 others","code":null,"level":"note","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":871,"byte_end":893,"line_start":33,"line_end":33,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    pub fn new() -> Tensor {","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":1179,"byte_end":1234,"line_start":44,"line_end":44,"column_start":5,"column_end":60,"is_primary":true,"text":[{"text":"    pub unsafe fn from_ptr(c_tensor: *mut C_tensor) -> Self {","highlight_start":5,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":1538,"byte_end":1599,"line_start":55,"line_end":55,"column_start":5,"column_end":66,"is_primary":true,"text":[{"text":"    pub unsafe fn clone_from_ptr(c_tensor: *mut C_tensor) -> Self {","highlight_start":5,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs","byte_start":14802,"byte_end":14879,"line_start":432,"line_end":432,"column_start":5,"column_end":82,"is_primary":true,"text":[{"text":"    pub fn f_from_slice<T: kind::Element>(data: &[T]) -> Result<Tensor, TchError> {","highlight_start":5,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"there is a method `f_slice` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor_fallible_generated.rs","byte_start":1030485,"byte_end":1030662,"line_start":31575,"line_end":31581,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"    pub fn f_slice(","highlight_start":5,"highlight_end":20},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        dim: i64,","highlight_start":1,"highlight_end":18},{"text":"        start: impl Into<Option<i64>>,","highlight_start":1,"highlight_end":39},{"text":"        end: impl Into<Option<i64>>,","highlight_start":1,"highlight_end":37},{"text":"        step: i64,","highlight_start":1,"highlight_end":19},{"text":"    ) -> Result<Tensor, TchError> {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `of_slice` found for struct `tch::Tensor` in the current scope\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs:34:30\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let inputs = Tensor::of_slice(&[mev_potential, stake_volatility, latency_forecast])\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `Tensor`\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `tch::Tensor` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      tch::Tensor::new\u001b[0m\n\u001b[0m      tch::Tensor::from_ptr\u001b[0m\n\u001b[0m      tch::Tensor::clone_from_ptr\u001b[0m\n\u001b[0m      tch::Tensor::f_from_slice\u001b[0m\n\u001b[0m      and 909 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor.rs:33:5\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Tensor {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn from_ptr(c_tensor: *mut C_tensor) -> Self {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn clone_from_ptr(c_tensor: *mut C_tensor) -> Self {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m432\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn f_from_slice<T: kind::Element>(data: &[T]) -> Result<Tensor, TchError> {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `f_slice` with a similar name, but with different arguments\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/wrappers/tensor_fallible_generated.rs:31575:5\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn f_slice(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        dim: i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31578\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        start: impl Into<Option<i64>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31579\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        end: impl Into<Option<i64>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        step: i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<Tensor, TchError> {\u001b[0m\n\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `forward` found for struct `Sequential` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs","byte_start":204,"byte_end":211,"line_start":6,"line_end":6,"column_start":8,"column_end":15,"is_primary":false,"text":[{"text":"    fn forward(&self, xs: &Tensor) -> Tensor;","highlight_start":8,"highlight_end":15}],"label":"the method is available for `Sequential` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":1403,"byte_end":1410,"line_start":37,"line_end":37,"column_start":33,"column_end":40,"is_primary":true,"text":[{"text":"        let nn_output = self.nn.forward(&inputs).double_value(&[0]) as f32;","highlight_start":33,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"there is a method `forward_t` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs","byte_start":504,"byte_end":560,"line_start":14,"line_end":14,"column_start":5,"column_end":61,"is_primary":true,"text":[{"text":"    fn forward_t(&self, xs: &Tensor, train: bool) -> Tensor;","highlight_start":5,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"trait `Module` which provides `forward` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":80,"byte_end":80,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::core::infernal_neuroswarm_consensus::infernal_neuroswarm_consensus_types::INSCFlamecall;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use tch::nn::Module;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `forward` found for struct `Sequential` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs:37:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let nn_output = self.nn.forward(&inputs).double_value(&[0]) as f32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs:6:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn forward(&self, xs: &Tensor) -> Tensor;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `Sequential` here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `forward_t` with a similar name, but with different arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tch-0.19.0/src/nn/module.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn forward_t(&self, xs: &Tensor, train: bool) -> Tensor;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `Module` which provides `forward` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use tch::nn::Module;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `new` found for struct `VRFInOut` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":2367,"byte_end":2370,"line_start":55,"line_end":55,"column_start":63,"column_end":66,"is_primary":true,"text":[{"text":"            let (io, proof) = self.keypair.vrf_sign(VRFInOut::new(&seed, &extra))?;","highlight_start":63,"highlight_end":66}],"label":"function or associated item not found in `VRFInOut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is a method `ne` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs","byte_start":9692,"byte_end":9725,"line_start":262,"line_end":262,"column_start":5,"column_end":38,"is_primary":true,"text":[{"text":"    fn ne(&self, other: &Rhs) -> bool {","highlight_start":5,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new` found for struct `VRFInOut` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs:55:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let (io, proof) = self.keypair.vrf_sign(VRFInOut::new(&seed, &extra))?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `VRFInOut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `ne` with a similar name, but with different arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs:262:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn ne(&self, other: &Rhs) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the `?` operator can only be applied to values that implement `Try`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":2335,"byte_end":2387,"line_start":55,"line_end":55,"column_start":31,"column_end":83,"is_primary":true,"text":[{"text":"            let (io, proof) = self.keypair.vrf_sign(VRFInOut::new(&seed, &extra))?;","highlight_start":31,"highlight_end":83}],"label":"the `?` operator cannot be applied to type `(VRFInOut, VRFProof, VRFProofBatchable)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs","byte_start":2335,"byte_end":2387,"line_start":55,"line_end":55,"column_start":31,"column_end":83,"is_primary":false,"text":[{"text":"            let (io, proof) = self.keypair.vrf_sign(VRFInOut::new(&seed, &extra))?;","highlight_start":31,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Try` is not implemented for `(VRFInOut, VRFProof, VRFProofBatchable)`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the `?` operator can only be applied to values that implement `Try`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_vrf.rs:55:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let (io, proof) = self.keypair.vrf_sign(VRFInOut::new(&seed, &extra))?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe `?` operator cannot be applied to type `(VRFInOut, VRFProof, VRFProofBatchable)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Try` is not implemented for `(VRFInOut, VRFProof, VRFProofBatchable)`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `data` on type `Flamecall`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs","byte_start":1002,"byte_end":1006,"line_start":27,"line_end":27,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"        hasher.update(&tx.core.data);","highlight_start":32,"highlight_end":36}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"one of the expressions' fields has a field of the same name","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs","byte_start":1002,"byte_end":1002,"line_start":27,"line_end":27,"column_start":32,"column_end":32,"is_primary":true,"text":[{"text":"        hasher.update(&tx.core.data);","highlight_start":32,"highlight_end":32}],"label":null,"suggested_replacement":"core.","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `data` on type `Flamecall`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_flamehash.rs:27:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        hasher.update(&tx.core.data);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: one of the expressions' fields has a field of the same name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        hasher.update(&tx.core.\u001b[0m\u001b[0m\u001b[38;5;10mcore.\u001b[0m\u001b[0mdata);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[38;5;10m+++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `is_leader_eligible` on type `Result<Flamekeeper, InfernoError>`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/testutils.rs","byte_start":1538,"byte_end":1556,"line_start":43,"line_end":43,"column_start":15,"column_end":33,"is_primary":true,"text":[{"text":"            v.is_leader_eligible = true; // Sicherstellen, dass sie leaderfähig sind","highlight_start":15,"highlight_end":33}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"one of the expressions' fields has a field of the same name","code":null,"level":"help","spans":[{"file_name":"src/core/testutils.rs","byte_start":1538,"byte_end":1538,"line_start":43,"line_end":43,"column_start":15,"column_end":15,"is_primary":true,"text":[{"text":"            v.is_leader_eligible = true; // Sicherstellen, dass sie leaderfähig sind","highlight_start":15,"highlight_end":15}],"label":null,"suggested_replacement":"unwrap().","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `is_leader_eligible` on type `Result<Flamekeeper, InfernoError>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/testutils.rs:43:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            v.is_leader_eligible = true; // Sicherstellen, dass sie leaderfähig sind\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: one of the expressions' fields has a field of the same name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            v.\u001b[0m\u001b[0m\u001b[38;5;10munwrap().\u001b[0m\u001b[0mis_leader_eligible = true; // Sicherstellen, dass sie leaderfähig sind\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"a value of type `Vec<Flamekeeper>` cannot be built from an iterator over elements of type `Result<Flamekeeper, InfernoError>`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/core/testutils.rs","byte_start":1644,"byte_end":1651,"line_start":46,"line_end":46,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .collect()","highlight_start":10,"highlight_end":17}],"label":"value of type `Vec<Flamekeeper>` cannot be built from `std::iter::Iterator<Item=Result<Flamekeeper, InfernoError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `FromIterator<Result<Flamekeeper, InfernoError>>` is not implemented for `Vec<Flamekeeper>`\nbut trait `FromIterator<Flamekeeper>` is implemented for it","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for that trait implementation, expected `Flamekeeper`, found `Result<Flamekeeper, InfernoError>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the method call chain might not have had the expected associated types","code":null,"level":"note","spans":[{"file_name":"src/core/testutils.rs","byte_start":1008,"byte_end":1018,"line_start":32,"line_end":32,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"    (0..count)","highlight_start":5,"highlight_end":15}],"label":"this expression has type `Range<usize>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/testutils.rs","byte_start":1028,"byte_end":1634,"line_start":33,"line_end":45,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"        .map(|i| {","highlight_start":10,"highlight_end":19},{"text":"            let mut v = Flamekeeper::new(","highlight_start":1,"highlight_end":42},{"text":"                i as u64,","highlight_start":1,"highlight_end":26},{"text":"                rng.gen_range(1000..20_000), // Zufälliger Stake","highlight_start":1,"highlight_end":65},{"text":"                rng.gen_range(-180.0..180.0), // Zufällige Longitude","highlight_start":1,"highlight_end":69},{"text":"                rng.gen_range(-90.0..90.0),  // Zufällige Latitude","highlight_start":1,"highlight_end":67},{"text":"                6.0,                         // CPU units (z. B. 6 GHz)","highlight_start":1,"highlight_end":72},{"text":"                4.0,                         // RAM (4 GB)","highlight_start":1,"highlight_end":59},{"text":"                50.0,                        // Bandwidth (50 Mbps)","highlight_start":1,"highlight_end":68},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            v.is_leader_eligible = true; // Sicherstellen, dass sie leaderfähig sind","highlight_start":1,"highlight_end":85},{"text":"            v","highlight_start":1,"highlight_end":14},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":"`Iterator::Item` is `Result<Flamekeeper, InfernoError>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `std::iter::Iterator::collect`","code":null,"level":"note","spans":[{"file_name":"/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs","byte_start":66374,"byte_end":66398,"line_start":1972,"line_end":1972,"column_start":19,"column_end":43,"is_primary":true,"text":[{"text":"    fn collect<B: FromIterator<Self::Item>>(self) -> B","highlight_start":19,"highlight_end":43}],"label":"required by this bound in `Iterator::collect`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: a value of type `Vec<Flamekeeper>` cannot be built from an iterator over elements of type `Result<Flamekeeper, InfernoError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/testutils.rs:46:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .collect()\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue of type `Vec<Flamekeeper>` cannot be built from `std::iter::Iterator<Item=Result<Flamekeeper, InfernoError>>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `FromIterator<\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<\u001b[0m\u001b[0mFlamekeeper, \u001b[0m\u001b[0m\u001b[1m\u001b[35mInfernoError>\u001b[0m\u001b[0m>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis not\u001b[0m\u001b[0m implemented for `Vec<Flamekeeper>`\u001b[0m\n\u001b[0m             but trait `FromIterator<Flamekeeper>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for it\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for that trait implementation, expected `\u001b[0m\u001b[0m\u001b[1m\u001b[35mFlamekeeper\u001b[0m\u001b[0m`, found `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<Flamekeeper, InfernoError>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method call chain might not have had the expected associated types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/testutils.rs:33:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    (0..count)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis expression has type `Range<usize>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        .map(|i| {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m __________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut v = Flamekeeper::new(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                i as u64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rng.gen_range(1000..20_000), // Zufälliger Stake\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            v\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|__________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m`Iterator::Item` is `Result<Flamekeeper, InfernoError>` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `std::iter::Iterator::collect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:1972:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1972\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn collect<B: FromIterator<Self::Item>>(self) -> B\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Iterator::collect`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `is_leader_eligible` on type `Result<Flamekeeper, InfernoError>`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/testutils.rs","byte_start":2562,"byte_end":2580,"line_start":79,"line_end":79,"column_start":15,"column_end":33,"is_primary":true,"text":[{"text":"            v.is_leader_eligible = true;","highlight_start":15,"highlight_end":33}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"one of the expressions' fields has a field of the same name","code":null,"level":"help","spans":[{"file_name":"src/core/testutils.rs","byte_start":2562,"byte_end":2562,"line_start":79,"line_end":79,"column_start":15,"column_end":15,"is_primary":true,"text":[{"text":"            v.is_leader_eligible = true;","highlight_start":15,"highlight_end":15}],"label":null,"suggested_replacement":"unwrap().","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `is_leader_eligible` on type `Result<Flamekeeper, InfernoError>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/testutils.rs:79:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            v.is_leader_eligible = true;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: one of the expressions' fields has a field of the same name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            v.\u001b[0m\u001b[0m\u001b[38;5;10munwrap().\u001b[0m\u001b[0mis_leader_eligible = true;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"a value of type `Vec<Flamekeeper>` cannot be built from an iterator over elements of type `Result<Flamekeeper, InfernoError>`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/core/testutils.rs","byte_start":2623,"byte_end":2630,"line_start":82,"line_end":82,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .collect()","highlight_start":10,"highlight_end":17}],"label":"value of type `Vec<Flamekeeper>` cannot be built from `std::iter::Iterator<Item=Result<Flamekeeper, InfernoError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `FromIterator<Result<Flamekeeper, InfernoError>>` is not implemented for `Vec<Flamekeeper>`\nbut trait `FromIterator<Flamekeeper>` is implemented for it","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for that trait implementation, expected `Flamekeeper`, found `Result<Flamekeeper, InfernoError>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the method call chain might not have had the expected associated types","code":null,"level":"note","spans":[{"file_name":"src/core/testutils.rs","byte_start":2261,"byte_end":2271,"line_start":68,"line_end":68,"column_start":5,"column_end":15,"is_primary":false,"text":[{"text":"    (0..count)","highlight_start":5,"highlight_end":15}],"label":"this expression has type `Range<usize>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/testutils.rs","byte_start":2281,"byte_end":2613,"line_start":69,"line_end":81,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"        .map(|i| {","highlight_start":10,"highlight_end":19},{"text":"            let mut v = Flamekeeper::new(","highlight_start":1,"highlight_end":42},{"text":"                i as u64,","highlight_start":1,"highlight_end":26},{"text":"                stake,","highlight_start":1,"highlight_end":23},{"text":"                i as f64,","highlight_start":1,"highlight_end":26},{"text":"                i as f64,","highlight_start":1,"highlight_end":26},{"text":"                6.0,  // CPU units","highlight_start":1,"highlight_end":35},{"text":"                4.0,  // RAM","highlight_start":1,"highlight_end":29},{"text":"                50.0, // Bandwidth","highlight_start":1,"highlight_end":35},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            v.is_leader_eligible = true;","highlight_start":1,"highlight_end":41},{"text":"            v","highlight_start":1,"highlight_end":14},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":"`Iterator::Item` is `Result<Flamekeeper, InfernoError>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `std::iter::Iterator::collect`","code":null,"level":"note","spans":[{"file_name":"/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs","byte_start":66374,"byte_end":66398,"line_start":1972,"line_end":1972,"column_start":19,"column_end":43,"is_primary":true,"text":[{"text":"    fn collect<B: FromIterator<Self::Item>>(self) -> B","highlight_start":19,"highlight_end":43}],"label":"required by this bound in `Iterator::collect`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: a value of type `Vec<Flamekeeper>` cannot be built from an iterator over elements of type `Result<Flamekeeper, InfernoError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/testutils.rs:82:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .collect()\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue of type `Vec<Flamekeeper>` cannot be built from `std::iter::Iterator<Item=Result<Flamekeeper, InfernoError>>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `FromIterator<\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<\u001b[0m\u001b[0mFlamekeeper, \u001b[0m\u001b[0m\u001b[1m\u001b[35mInfernoError>\u001b[0m\u001b[0m>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis not\u001b[0m\u001b[0m implemented for `Vec<Flamekeeper>`\u001b[0m\n\u001b[0m             but trait `FromIterator<Flamekeeper>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for it\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for that trait implementation, expected `\u001b[0m\u001b[0m\u001b[1m\u001b[35mFlamekeeper\u001b[0m\u001b[0m`, found `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<Flamekeeper, InfernoError>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method call chain might not have had the expected associated types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/testutils.rs:69:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    (0..count)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis expression has type `Range<usize>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        .map(|i| {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m __________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut v = Flamekeeper::new(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                i as u64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                stake,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            v\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|__________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m`Iterator::Item` is `Result<Flamekeeper, InfernoError>` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `std::iter::Iterator::collect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:1972:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1972\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn collect<B: FromIterator<Self::Item>>(self) -> B\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Iterator::collect`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function takes 8 arguments but 5 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/core/testutils.rs","byte_start":2736,"byte_end":2776,"line_start":87,"line_end":87,"column_start":32,"column_end":72,"is_primary":false,"text":[{"text":"        .map(|i| Flamecall::new(i as u64, \"Alice\", \"Bob\", 100, 100_000))","highlight_start":32,"highlight_end":72}],"label":"three arguments of type `u64`, `std::option::Option<Vec<u8>>`, and `std::option::Option<(Vec<u8>, schnorrkel::PublicKey)>` are missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/testutils.rs","byte_start":2722,"byte_end":2736,"line_start":87,"line_end":87,"column_start":18,"column_end":32,"is_primary":true,"text":[{"text":"        .map(|i| Flamecall::new(i as u64, \"Alice\", \"Bob\", 100, 100_000))","highlight_start":18,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":906,"byte_end":916,"line_start":39,"line_end":39,"column_start":9,"column_end":19,"is_primary":false,"text":[{"text":"        nonce: u64,","highlight_start":9,"highlight_end":19}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":926,"byte_end":947,"line_start":40,"line_end":40,"column_start":9,"column_end":30,"is_primary":false,"text":[{"text":"        data: Option<Vec<u8>>,","highlight_start":9,"highlight_end":30}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":957,"byte_end":995,"line_start":41,"line_end":41,"column_start":9,"column_end":47,"is_primary":false,"text":[{"text":"        zk_proof: Option<(Vec<u8>, PublicKey)>,","highlight_start":9,"highlight_end":47}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":784,"byte_end":787,"line_start":33,"line_end":33,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the arguments","code":null,"level":"help","spans":[{"file_name":"src/core/testutils.rs","byte_start":2736,"byte_end":2776,"line_start":87,"line_end":87,"column_start":32,"column_end":72,"is_primary":true,"text":[{"text":"        .map(|i| Flamecall::new(i as u64, \"Alice\", \"Bob\", 100, 100_000))","highlight_start":32,"highlight_end":72}],"label":null,"suggested_replacement":"(i as u64, \"Alice\", \"Bob\", 100, 100_000, /* u64 */, /* std::option::Option<Vec<u8>> */, /* std::option::Option<(Vec<u8>, schnorrkel::PublicKey)> */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 8 arguments but 5 arguments were supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/testutils.rs:87:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map(|i| Flamecall::new(i as u64, \"Alice\", \"Bob\", 100, 100_000))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthree arguments of type `u64`, `std::option::Option<Vec<u8>>`, and `std::option::Option<(Vec<u8>, schnorrkel::PublicKey)>` are missing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_types/infernal_types_flamecall.rs:33:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nonce: u64,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        data: Option<Vec<u8>>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        zk_proof: Option<(Vec<u8>, PublicKey)>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        .map(|i| Flamecall::new(i as u64, \"Alice\", \"Bob\", 100, 100_000\u001b[0m\u001b[0m\u001b[38;5;10m, /* u64 */, /* std::option::Option<Vec<u8>> */, /* std::option::Option<(Vec<u8>, schnorrkel::PublicKey)> */\u001b[0m\u001b[0m))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"a value of type `Vec<Flamecall>` cannot be built from an iterator over elements of type `Result<Flamecall, InfernoError>`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/core/testutils.rs","byte_start":2787,"byte_end":2794,"line_start":88,"line_end":88,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .collect()","highlight_start":10,"highlight_end":17}],"label":"value of type `Vec<Flamecall>` cannot be built from `std::iter::Iterator<Item=Result<Flamecall, InfernoError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `FromIterator<Result<Flamecall, InfernoError>>` is not implemented for `Vec<Flamecall>`\nbut trait `FromIterator<Flamecall>` is implemented for it","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for that trait implementation, expected `Flamecall`, found `Result<Flamecall, InfernoError>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the method call chain might not have had the expected associated types","code":null,"level":"note","spans":[{"file_name":"src/core/testutils.rs","byte_start":2695,"byte_end":2704,"line_start":86,"line_end":86,"column_start":5,"column_end":14,"is_primary":false,"text":[{"text":"    (0..size)","highlight_start":5,"highlight_end":14}],"label":"this expression has type `Range<usize>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/testutils.rs","byte_start":2714,"byte_end":2777,"line_start":87,"line_end":87,"column_start":10,"column_end":73,"is_primary":true,"text":[{"text":"        .map(|i| Flamecall::new(i as u64, \"Alice\", \"Bob\", 100, 100_000))","highlight_start":10,"highlight_end":73}],"label":"`Iterator::Item` is `Result<Flamecall, InfernoError>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `std::iter::Iterator::collect`","code":null,"level":"note","spans":[{"file_name":"/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs","byte_start":66374,"byte_end":66398,"line_start":1972,"line_end":1972,"column_start":19,"column_end":43,"is_primary":true,"text":[{"text":"    fn collect<B: FromIterator<Self::Item>>(self) -> B","highlight_start":19,"highlight_end":43}],"label":"required by this bound in `Iterator::collect`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: a value of type `Vec<Flamecall>` cannot be built from an iterator over elements of type `Result<Flamecall, InfernoError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/testutils.rs:88:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .collect()\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue of type `Vec<Flamecall>` cannot be built from `std::iter::Iterator<Item=Result<Flamecall, InfernoError>>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `FromIterator<\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<\u001b[0m\u001b[0mFlamecall, \u001b[0m\u001b[0m\u001b[1m\u001b[35mInfernoError>\u001b[0m\u001b[0m>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis not\u001b[0m\u001b[0m implemented for `Vec<Flamecall>`\u001b[0m\n\u001b[0m             but trait `FromIterator<Flamecall>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for it\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for that trait implementation, expected `\u001b[0m\u001b[0m\u001b[1m\u001b[35mFlamecall\u001b[0m\u001b[0m`, found `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<Flamecall, InfernoError>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method call chain might not have had the expected associated types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/testutils.rs:87:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (0..size)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis expression has type `Range<usize>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map(|i| Flamecall::new(i as u64, \"Alice\", \"Bob\", 100, 100_000))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m`Iterator::Item` is `Result<Flamecall, InfernoError>` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `std::iter::Iterator::collect`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:1972:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1972\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn collect<B: FromIterator<Self::Item>>(self) -> B\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Iterator::collect`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"borrow of moved value: `proof`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":2405,"byte_end":2410,"line_start":75,"line_end":75,"column_start":36,"column_end":41,"is_primary":false,"text":[{"text":"            Ok::<_, InfernoError>((proof, Signature::from_bytes(&proof).unwrap()))","highlight_start":36,"highlight_end":41}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":2434,"byte_end":2440,"line_start":75,"line_end":75,"column_start":65,"column_end":71,"is_primary":true,"text":[{"text":"            Ok::<_, InfernoError>((proof, Signature::from_bytes(&proof).unwrap()))","highlight_start":65,"highlight_end":71}],"label":"value borrowed here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":1937,"byte_end":1942,"line_start":65,"line_end":65,"column_start":49,"column_end":54,"is_primary":false,"text":[{"text":"        let zk_proof_signature = zk_proof.map(|(proof, pub_key)| {","highlight_start":49,"highlight_end":54}],"label":"move occurs because `proof` has type `Vec<u8>`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"borrow occurs due to deref coercion to `[u8]`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"deref defined here","code":null,"level":"note","spans":[{"file_name":"/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs","byte_start":122467,"byte_end":122478,"line_start":3287,"line_end":3287,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"    type Target = [T];","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider cloning the value if the performance cost is acceptable","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_types/infernal_types_flamecall.rs","byte_start":2410,"byte_end":2410,"line_start":75,"line_end":75,"column_start":41,"column_end":41,"is_primary":true,"text":[{"text":"            Ok::<_, InfernoError>((proof, Signature::from_bytes(&proof).unwrap()))","highlight_start":41,"highlight_end":41}],"label":null,"suggested_replacement":".clone()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: borrow of moved value: `proof`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_types/infernal_types_flamecall.rs:75:65\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let zk_proof_signature = zk_proof.map(|(proof, pub_key)| {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `proof` has type `Vec<u8>`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Ok::<_, InfernoError>((proof, Signature::from_bytes(&proof).unwrap()))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue borrowed here after move\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: borrow occurs due to deref coercion to `[u8]`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: deref defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:3287:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    type Target = [T];\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider cloning the value if the performance cost is acceptable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Ok::<_, InfernoError>((proof\u001b[0m\u001b[0m\u001b[38;5;10m.clone()\u001b[0m\u001b[0m, Signature::from_bytes(&proof).unwrap()))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"borrow of moved value: `transactions`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"src/core/infernal_types/infernal_types_emberblock.rs","byte_start":1707,"byte_end":1719,"line_start":51,"line_end":51,"column_start":13,"column_end":25,"is_primary":false,"text":[{"text":"            transactions,","highlight_start":13,"highlight_end":25}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_types/infernal_types_emberblock.rs","byte_start":2224,"byte_end":2236,"line_start":65,"line_end":65,"column_start":84,"column_end":96,"is_primary":true,"text":[{"text":"        info!(\"Created Emberblock {}: shard_id={}, tx_count={}\", height, shard_id, transactions.len());","highlight_start":84,"highlight_end":96}],"label":"value borrowed here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_types/infernal_types_emberblock.rs","byte_start":884,"byte_end":896,"line_start":30,"line_end":30,"column_start":9,"column_end":21,"is_primary":false,"text":[{"text":"        transactions: Vec<Flamecall>,","highlight_start":9,"highlight_end":21}],"label":"move occurs because `transactions` has type `Vec<Flamecall>`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider cloning the value if the performance cost is acceptable","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_types/infernal_types_emberblock.rs","byte_start":1719,"byte_end":1719,"line_start":51,"line_end":51,"column_start":25,"column_end":25,"is_primary":true,"text":[{"text":"            transactions,","highlight_start":25,"highlight_end":25}],"label":null,"suggested_replacement":": transactions.clone()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: borrow of moved value: `transactions`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_types/infernal_types_emberblock.rs:65:84\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   transactions: Vec<Flamecall>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `transactions` has type `Vec<Flamecall>`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       transactions,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   info!(\"Created Emberblock {}: shard_id={}, tx_count={}\", height, shard_id, transactions.le\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue borrowed here after move\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider cloning the value if the performance cost is acceptable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            transactions\u001b[0m\u001b[0m\u001b[38;5;10m: transactions.clone()\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot assign to `self.last_chaos`, which is behind a `&` reference","code":{"code":"E0594","explanation":"A non-mutable value was assigned a value.\n\nErroneous code example:\n\n```compile_fail,E0594\nstruct SolarSystem {\n    earth: i32,\n}\n\nlet ss = SolarSystem { earth: 3 };\nss.earth = 2; // error!\n```\n\nTo fix this error, declare `ss` as mutable by using the `mut` keyword:\n\n```\nstruct SolarSystem {\n    earth: i32,\n}\n\nlet mut ss = SolarSystem { earth: 3 }; // declaring `ss` as mutable\nss.earth = 2; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_chaos.rs","byte_start":3239,"byte_end":3260,"line_start":71,"line_end":71,"column_start":13,"column_end":34,"is_primary":true,"text":[{"text":"            self.last_chaos = now;","highlight_start":13,"highlight_end":34}],"label":"`self` is a `&` reference, so the data it refers to cannot be written","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this to be a mutable reference","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_chaos.rs","byte_start":3062,"byte_end":3062,"line_start":68,"line_end":68,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"    fn check_rate_limit(&self, max_per_sec: u32) -> Result<(), InfernoError> {","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":"mut ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0594]\u001b[0m\u001b[0m\u001b[1m: cannot assign to `self.last_chaos`, which is behind a `&` reference\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_chaos.rs:71:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.last_chaos = now;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`self` is a `&` reference, so the data it refers to cannot be written\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing this to be a mutable reference\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn check_rate_limit(&\u001b[0m\u001b[0m\u001b[38;5;10mmut \u001b[0m\u001b[0mself, max_per_sec: u32) -> Result<(), InfernoError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[38;5;10m+++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `block_interval`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_finalflame.rs","byte_start":2302,"byte_end":2316,"line_start":56,"line_end":56,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"        let block_interval = self.predict_block_interval(&load_metrics)?;","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_finalflame.rs","byte_start":2302,"byte_end":2316,"line_start":56,"line_end":56,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"        let block_interval = self.predict_block_interval(&load_metrics)?;","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":"_block_interval","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `block_interval`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_finalflame.rs:56:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let block_interval = self.predict_block_interval(&load_metrics)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_block_interval`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of moved value: `neuron`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":3794,"byte_end":3800,"line_start":91,"line_end":91,"column_start":21,"column_end":27,"is_primary":false,"text":[{"text":"                for neuron in small_shard.neurons {","highlight_start":21,"highlight_end":27}],"label":"this reinitialization might get skipped","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":3894,"byte_end":3923,"line_start":93,"line_end":93,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"                    for shard in &mut self.shards {","highlight_start":21,"highlight_end":50}],"label":"inside of this loop","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":3894,"byte_end":4219,"line_start":93,"line_end":99,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    for shard in &mut self.shards {","highlight_start":21,"highlight_end":52},{"text":"                        if shard.region == small_shard.region && shard.neurons.len() < self.max_shard_size {","highlight_start":1,"highlight_end":109},{"text":"                            shard.add_neuron(neuron)?;","highlight_start":1,"highlight_end":55},{"text":"                            reassigned = true;","highlight_start":1,"highlight_end":47},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":4080,"byte_end":4086,"line_start":95,"line_end":95,"column_start":46,"column_end":52,"is_primary":false,"text":[{"text":"                            shard.add_neuron(neuron)?;","highlight_start":46,"highlight_end":52}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":4453,"byte_end":4459,"line_start":102,"line_end":102,"column_start":46,"column_end":52,"is_primary":true,"text":[{"text":"                        new_shard.add_neuron(neuron)?;","highlight_start":46,"highlight_end":52}],"label":"value used here after move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":3794,"byte_end":3800,"line_start":91,"line_end":91,"column_start":21,"column_end":27,"is_primary":false,"text":[{"text":"                for neuron in small_shard.neurons {","highlight_start":21,"highlight_end":27}],"label":"move occurs because `neuron` has type `Neuron`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider changing this parameter type in method `add_neuron` to borrow instead if owning the value isn't necessary","code":null,"level":"note","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs","byte_start":1503,"byte_end":1509,"line_start":42,"line_end":42,"column_start":42,"column_end":48,"is_primary":true,"text":[{"text":"    pub fn add_neuron(&mut self, neuron: Neuron) -> Result<(), InfernoError> {","highlight_start":42,"highlight_end":48}],"label":"this parameter takes ownership of the value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs","byte_start":1473,"byte_end":1483,"line_start":42,"line_end":42,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"    pub fn add_neuron(&mut self, neuron: Neuron) -> Result<(), InfernoError> {","highlight_start":12,"highlight_end":22}],"label":"in this method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"verify that your loop breaking logic is correct","code":null,"level":"note","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":4165,"byte_end":4170,"line_start":97,"line_end":97,"column_start":29,"column_end":34,"is_primary":true,"text":[{"text":"                            break;","highlight_start":29,"highlight_end":34}],"label":"this `break` exits the loop at line 93","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":3894,"byte_end":3923,"line_start":93,"line_end":93,"column_start":21,"column_end":50,"is_primary":false,"text":[{"text":"                    for shard in &mut self.shards {","highlight_start":21,"highlight_end":50}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":3894,"byte_end":4219,"line_start":93,"line_end":99,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    for shard in &mut self.shards {","highlight_start":21,"highlight_end":52},{"text":"                        if shard.region == small_shard.region && shard.neurons.len() < self.max_shard_size {","highlight_start":1,"highlight_end":109},{"text":"                            shard.add_neuron(neuron)?;","highlight_start":1,"highlight_end":55},{"text":"                            reassigned = true;","highlight_start":1,"highlight_end":47},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":3790,"byte_end":3823,"line_start":91,"line_end":91,"column_start":17,"column_end":50,"is_primary":false,"text":[{"text":"                for neuron in small_shard.neurons {","highlight_start":17,"highlight_end":50}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":3790,"byte_end":4555,"line_start":91,"line_end":105,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"                for neuron in small_shard.neurons {","highlight_start":17,"highlight_end":52},{"text":"                    let mut reassigned = false;","highlight_start":1,"highlight_end":48},{"text":"                    for shard in &mut self.shards {","highlight_start":1,"highlight_end":52},{"text":"                        if shard.region == small_shard.region && shard.neurons.len() < self.max_shard_size {","highlight_start":1,"highlight_end":109},{"text":"                            shard.add_neuron(neuron)?;","highlight_start":1,"highlight_end":55},{"text":"                            reassigned = true;","highlight_start":1,"highlight_end":47},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if !reassigned && self.shards.len() < self.max_shard_size {","highlight_start":1,"highlight_end":80},{"text":"                        let mut new_shard = Shard::new(self.shards.len() as u64 + 1, &small_shard.region)?;","highlight_start":1,"highlight_end":108},{"text":"                        new_shard.add_neuron(neuron)?;","highlight_start":1,"highlight_end":55},{"text":"                        self.shards.push(new_shard);","highlight_start":1,"highlight_end":53},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":3263,"byte_end":3290,"line_start":79,"line_end":79,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        while i < self.shards.len() {","highlight_start":9,"highlight_end":36}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider moving the expression out of the loop so it is only moved once","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":3894,"byte_end":3894,"line_start":93,"line_end":93,"column_start":21,"column_end":21,"is_primary":true,"text":[{"text":"                    for shard in &mut self.shards {","highlight_start":21,"highlight_end":21}],"label":null,"suggested_replacement":"let mut value = shard.add_neuron(neuron);\n                    ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":3894,"byte_end":4219,"line_start":93,"line_end":99,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"                    for shard in &mut self.shards {","highlight_start":21,"highlight_end":52},{"text":"                        if shard.region == small_shard.region && shard.neurons.len() < self.max_shard_size {","highlight_start":1,"highlight_end":109},{"text":"                            shard.add_neuron(neuron)?;","highlight_start":1,"highlight_end":55},{"text":"                            reassigned = true;","highlight_start":1,"highlight_end":47},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":4063,"byte_end":4087,"line_start":95,"line_end":95,"column_start":29,"column_end":53,"is_primary":true,"text":[{"text":"                            shard.add_neuron(neuron)?;","highlight_start":29,"highlight_end":53}],"label":null,"suggested_replacement":"value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider cloning the value if the performance cost is acceptable","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":4086,"byte_end":4086,"line_start":95,"line_end":95,"column_start":52,"column_end":52,"is_primary":true,"text":[{"text":"                            shard.add_neuron(neuron)?;","highlight_start":52,"highlight_end":52}],"label":null,"suggested_replacement":".clone()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `neuron`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs:102:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                for neuron in small_shard.neurons {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis reinitialization might get skipped\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmove occurs because `neuron` has type `Neuron`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let mut reassigned = false;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    for shard in &mut self.shards {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12minside of this loop\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if shard.region == small_sh\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            shard.add_neuron(neuron)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        new_shard.add_neuron(neuron)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after move\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: consider changing this parameter type in method `add_neuron` to borrow instead if owning the value isn't necessary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_types.rs:42:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn add_neuron(&mut self, neuron: Neuron) -> Result<(), InfernoError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this method\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis parameter takes ownership of the value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: verify that your loop breaking logic is correct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs:97:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        while i < self.shards.len() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                for neuron in small_shard.neurons {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let mut reassigned = false;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    for shard in &mut self.shards {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            break;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis `break` exits the loop at line 93\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider moving the expression out of the loop so it is only moved once\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10mlet mut value = shard.add_neuron(neuron);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m~                     \u001b[0m\u001b[0mfor shard in &mut self.shards {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         if shard.region == small_shard.region && shard.neurons.len() < self.max_shard_size {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[38;5;10mvalue\u001b[0m\u001b[0m?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider cloning the value if the performance cost is acceptable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            shard.add_neuron(neuron\u001b[0m\u001b[0m\u001b[38;5;10m.clone()\u001b[0m\u001b[0m)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[38;5;10m++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot borrow `self.shards` as mutable because it is also borrowed as immutable","code":{"code":"E0502","explanation":"A variable already borrowed with a certain mutability (either mutable or\nimmutable) was borrowed again with a different mutability.\n\nErroneous code example:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let y = &a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n    println!(\"{}\", y);\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it with a different mutability:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let y = &a; // ok!\n    println!(\"{}\", y);\n}\n```\n\nFor more information on Rust's ownership system, take a look at the\n[References & Borrowing][references-and-borrowing] section of the Book.\n\n[references-and-borrowing]: https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":7612,"byte_end":7633,"line_start":177,"line_end":177,"column_start":40,"column_end":61,"is_primary":true,"text":[{"text":"                    let merged_shard = self.shards.remove(j);","highlight_start":40,"highlight_end":61}],"label":"mutable borrow occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":7321,"byte_end":7332,"line_start":171,"line_end":171,"column_start":28,"column_end":39,"is_primary":false,"text":[{"text":"            let shard_a = &self.shards[i];","highlight_start":28,"highlight_end":39}],"label":"immutable borrow occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":7799,"byte_end":7809,"line_start":179,"line_end":179,"column_start":92,"column_end":102,"is_primary":false,"text":[{"text":"                    info!(\"Temporarily merged shards {} and {} due to interlinking={:.2}\", shard_a.id, merged_shard.id, interlinking);","highlight_start":92,"highlight_end":102}],"label":"immutable borrow later used here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":4571,"byte_end":4616,"line_start":140,"line_end":140,"column_start":17,"column_end":62,"is_primary":false,"text":[{"text":"                $crate::__private_api::format_args!($($arg)+),","highlight_start":17,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":3239,"byte_end":3426,"line_start":108,"line_end":113,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__log!(","highlight_start":9,"highlight_end":24},{"text":"            logger: $crate::__log_logger!(__log_global_logger),","highlight_start":1,"highlight_end":64},{"text":"            target: $crate::__private_api::module_path!(),","highlight_start":1,"highlight_end":59},{"text":"            $lvl,","highlight_start":1,"highlight_end":18},{"text":"            $($arg)+","highlight_start":1,"highlight_end":21},{"text":"        )","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":9362,"byte_end":9405,"line_start":272,"line_end":272,"column_start":23,"column_end":66,"is_primary":false,"text":[{"text":"    ($($arg:tt)+) => ($crate::log!($crate::Level::Info, $($arg)+))","highlight_start":23,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":7728,"byte_end":7841,"line_start":179,"line_end":179,"column_start":21,"column_end":134,"is_primary":false,"text":[{"text":"                    info!(\"Temporarily merged shards {} and {} due to interlinking={:.2}\", shard_a.id, merged_shard.id, interlinking);","highlight_start":21,"highlight_end":134}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"info!","def_site_span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":8393,"byte_end":8410,"line_start":252,"line_end":252,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! info {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::log!","def_site_span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":2206,"byte_end":2222,"line_start":75,"line_end":75,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! log {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__log!","def_site_span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":3469,"byte_end":3487,"line_start":119,"line_end":119,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! __log {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__private_api::format_args!","def_site_span":{"file_name":"/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":34817,"byte_end":34841,"line_start":1003,"line_end":1003,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0502]\u001b[0m\u001b[0m\u001b[1m: cannot borrow `self.shards` as mutable because it is also borrowed as immutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs:177:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0md_a = &self.shards[i];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mimmutable borrow occurs here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mlet merged_shard = self.shards.remove(j);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmutable borrow occurs here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mself.shards[i].neurons.extend(merged_shard.neurons);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0minfo!(\"Temporarily merged shards {} and {} due to interlinking={:.2}\", shard_a.id, merged_s\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mimmutable borrow later used here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot borrow `self.shards` as mutable because it is also borrowed as immutable","code":{"code":"E0502","explanation":"A variable already borrowed with a certain mutability (either mutable or\nimmutable) was borrowed again with a different mutability.\n\nErroneous code example:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let y = &a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n    println!(\"{}\", y);\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it with a different mutability:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let y = &a; // ok!\n    println!(\"{}\", y);\n}\n```\n\nFor more information on Rust's ownership system, take a look at the\n[References & Borrowing][references-and-borrowing] section of the Book.\n\n[references-and-borrowing]: https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":7655,"byte_end":7666,"line_start":178,"line_end":178,"column_start":21,"column_end":32,"is_primary":true,"text":[{"text":"                    self.shards[i].neurons.extend(merged_shard.neurons);","highlight_start":21,"highlight_end":32}],"label":"mutable borrow occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":7321,"byte_end":7332,"line_start":171,"line_end":171,"column_start":28,"column_end":39,"is_primary":false,"text":[{"text":"            let shard_a = &self.shards[i];","highlight_start":28,"highlight_end":39}],"label":"immutable borrow occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":7799,"byte_end":7809,"line_start":179,"line_end":179,"column_start":92,"column_end":102,"is_primary":false,"text":[{"text":"                    info!(\"Temporarily merged shards {} and {} due to interlinking={:.2}\", shard_a.id, merged_shard.id, interlinking);","highlight_start":92,"highlight_end":102}],"label":"immutable borrow later used here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":4571,"byte_end":4616,"line_start":140,"line_end":140,"column_start":17,"column_end":62,"is_primary":false,"text":[{"text":"                $crate::__private_api::format_args!($($arg)+),","highlight_start":17,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":3239,"byte_end":3426,"line_start":108,"line_end":113,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__log!(","highlight_start":9,"highlight_end":24},{"text":"            logger: $crate::__log_logger!(__log_global_logger),","highlight_start":1,"highlight_end":64},{"text":"            target: $crate::__private_api::module_path!(),","highlight_start":1,"highlight_end":59},{"text":"            $lvl,","highlight_start":1,"highlight_end":18},{"text":"            $($arg)+","highlight_start":1,"highlight_end":21},{"text":"        )","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":9362,"byte_end":9405,"line_start":272,"line_end":272,"column_start":23,"column_end":66,"is_primary":false,"text":[{"text":"    ($($arg:tt)+) => ($crate::log!($crate::Level::Info, $($arg)+))","highlight_start":23,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs","byte_start":7728,"byte_end":7841,"line_start":179,"line_end":179,"column_start":21,"column_end":134,"is_primary":false,"text":[{"text":"                    info!(\"Temporarily merged shards {} and {} due to interlinking={:.2}\", shard_a.id, merged_shard.id, interlinking);","highlight_start":21,"highlight_end":134}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"info!","def_site_span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":8393,"byte_end":8410,"line_start":252,"line_end":252,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! info {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::log!","def_site_span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":2206,"byte_end":2222,"line_start":75,"line_end":75,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! log {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__log!","def_site_span":{"file_name":"/Users/dominicwalther/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/macros.rs","byte_start":3469,"byte_end":3487,"line_start":119,"line_end":119,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! __log {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__private_api::format_args!","def_site_span":{"file_name":"/Users/dominicwalther/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":34817,"byte_end":34841,"line_start":1003,"line_end":1003,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0502]\u001b[0m\u001b[0m\u001b[1m: cannot borrow `self.shards` as mutable because it is also borrowed as immutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_shardforge.rs:178:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mhard_a = &self.shards[i];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mimmutable borrow occurs here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   self.shards[i].neurons.extend(merged_shard.neurons);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmutable borrow occurs here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   info!(\"Temporarily merged shards {} and {} due to interlinking={:.2}\", shard_a.id, merge\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mimmutable borrow later used here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `sig`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_swarmforge.rs","byte_start":2735,"byte_end":2738,"line_start":75,"line_end":75,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"            let sig = keys.sign(hash.as_bytes())?;","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_swarmforge.rs","byte_start":2735,"byte_end":2738,"line_start":75,"line_end":75,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"            let sig = keys.sign(hash.as_bytes())?;","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"_sig","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `sig`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_swarmforge.rs:75:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let sig = keys.sign(hash.as_bytes())?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_sig`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `heat_index`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_swarmforge.rs","byte_start":4123,"byte_end":4133,"line_start":100,"line_end":100,"column_start":82,"column_end":92,"is_primary":true,"text":[{"text":"    fn meta_neuron_analyze(&self, meta_neuron: &SuperNeuron, tx: &INSCFlamecall, heat_index: f32, failure_rate: f32, latency_patterns: f32) -> f32 {","highlight_start":82,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_swarmforge.rs","byte_start":4123,"byte_end":4133,"line_start":100,"line_end":100,"column_start":82,"column_end":92,"is_primary":true,"text":[{"text":"    fn meta_neuron_analyze(&self, meta_neuron: &SuperNeuron, tx: &INSCFlamecall, heat_index: f32, failure_rate: f32, latency_patterns: f32) -> f32 {","highlight_start":82,"highlight_end":92}],"label":null,"suggested_replacement":"_heat_index","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `heat_index`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/core/infernal_neuroswarm_consensus/infernal_neuroswarm_consensus_swarmforge.rs:100:82\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0ml, heat_index: f32, failure_rate: f32, latency_patterns: f32) -> f32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_heat_index`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 50 previous errors; 15 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 50 previous errors; 15 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0061, E0277, E0308, E0382, E0412, E0432, E0502, E0594, E0599...","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0277, E0308, E0382, E0412, E0432, E0502, E0594, E0599...\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
